----------------------------------------------------------------
--                                                            --
--                     public.user_roles                      --
--                                                            --
----------------------------------------------------------------

-- Custom Claims & Role-based Access Control (RBAC)
-- https://supabase.com/docs/guides/auth/custom-claims-and-role-based-access-control-rbac

----------------------------------------------------------------

-- Functions for tracking last modification time
create extension if not exists moddatetime schema extensions;

----------------------------------------------------------------

drop trigger if exists on_updated_at on user_roles;

drop table if exists user_roles;

----------------------------------------------------------------

-- drop type if exists public.user_permission;
-- drop type if exists public.user_role;
-- create type public.user_permission as enum ('posts.delete');
-- create type public.user_role as enum ('guest', 'user', 'admin', 'superadmin');
-- alter type public.type_name add value 'new_type';
-- alter type public.type_name rename value 'old_type' to 'new_type';
-- alter type public.type_name rename to new_type_name;

----------------------------------------------------------------

create table user_roles (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now() not null,
  updated_at timestamptz default now() not null,
  user_id uuid references users(id) on delete cascade not null,
  role text default 'guest'::text not null,
  unique (user_id, role)
);
comment on column user_roles.updated_at is 'on_updated_at';
comment on column user_roles.role is 'guest, user, admin, superadmin';

-- Secure the table
alter table user_roles enable row level security;

-- Add row-level security
create policy "Public access for all users" on user_roles for select to authenticated, anon using ( true );
create policy "User can insert their own user_roles" on user_roles for insert to authenticated with check ( (select auth.uid()) = user_id );
create policy "User can update their own user_roles" on user_roles for update to authenticated using ( (select auth.uid()) = user_id );
create policy "User can delete their own user_roles" on user_roles for delete to authenticated using ( (select auth.uid()) = user_id );

-- Trigger for tracking last modification time
create trigger on_updated_at before update on user_roles
  for each row execute procedure moddatetime (updated_at);
