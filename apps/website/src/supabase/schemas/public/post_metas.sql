----------------------------------------------------------------
--                                                            --
--                     public.post_metas                      --
--                                                            --
----------------------------------------------------------------

drop function if exists set_view_count;
drop function if exists set_post_meta;

drop table if exists post_metas;

----------------------------------------------------------------

create table post_metas (
  id bigint generated by default as identity primary key,
  post_id bigint references posts(id) on delete cascade not null,
  meta_key varchar(255) not null,
  meta_value text,
  unique (post_id, meta_key)
);

-- Secure the table
alter table post_metas enable row level security;

-- Add row-level security
create policy "Public access for all users" on post_metas for select to authenticated, anon using ( true );
create policy "User can insert post_metas" on post_metas for insert to authenticated with check ( true );
create policy "User can update post_metas" on post_metas for update to authenticated using ( true );
create policy "User can delete post_metas" on post_metas for delete to authenticated using ( true );

----------------------------------------------------------------

create or replace function set_post_meta(postid bigint, metakey text, metavalue text)
returns void
security definer set search_path = public
as $$
begin
  if exists (select 1 from post_metas where post_id = postid and meta_key = metakey) then
    update post_metas set meta_value = metavalue where post_id = postid and meta_key = metakey;
  else
    insert into post_metas(post_id, meta_key, meta_value) values(postid, metakey, metavalue);
  end if;
end;
$$ language plpgsql;

----------------------------------------------------------------

create or replace function set_view_count(postid bigint)
returns void
security definer set search_path = public
as $$
begin
  if exists (select 1 from post_metas where post_id = postid and meta_key = 'view_count') then
    update post_metas set meta_value = meta_value::integer + 1 where post_id = postid and meta_key = 'view_count';
  else
    insert into post_metas(post_id, meta_key, meta_value) values(postid, 'view_count', '1');
  end if;
end;
$$ language plpgsql;
