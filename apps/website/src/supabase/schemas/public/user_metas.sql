----------------------------------------------------------------
--                                                            --
--                     public.user_metas                      --
--                                                            --
----------------------------------------------------------------

drop function if exists set_user_meta;

drop table if exists user_metas;

----------------------------------------------------------------

create table user_metas (
  id bigint generated by default as identity primary key,
  user_id uuid references users(id) on delete cascade not null,
  meta_key varchar(255) not null,
  meta_value text,
  unique (user_id, meta_key)
);

-- Secure the table
alter table user_metas enable row level security;

-- Add row-level security
create policy "Public access for all users" on user_metas for select to authenticated, anon using ( true );
create policy "User can insert their own user_metas" on user_metas for insert to authenticated with check ( (select auth.uid()) = user_id );
create policy "User can update their own user_metas" on user_metas for update to authenticated using ( (select auth.uid()) = user_id );
create policy "User can delete their own user_metas" on user_metas for delete to authenticated using ( (select auth.uid()) = user_id );

----------------------------------------------------------------

create or replace function set_user_meta(userid bigint, metakey text, metavalue text)
returns void
security definer set search_path = public
as $$
begin
  if exists (select 1 from user_metas where user_id = userid and meta_key = metakey) then
    update user_metas set meta_value = metavalue where user_id = userid and meta_key = metakey;
  else
    insert into user_metas(user_id, meta_key, meta_value) values(userid, metakey, metavalue);
  end if;
end;
$$ language plpgsql;
